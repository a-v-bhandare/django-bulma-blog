[
    {
        "model": "blog.tag",
        "pk": 1,
        "fields": {
            "name": "django"
        }
    },
    {
        "model": "blog.tag",
        "pk": 2,
        "fields": {
            "name": "python"
        }
    },
    {
        "model": "blog.article",
        "pk": 1,
        "fields": {
            "title": "A Crash Course in Django",
            "summary": "accid",
            "public": false,
            "latex_support": true,
            "slug": "accid",
            "body": "## Prerequisites<a class=\"headerlink\" id=\"prerequisites\" href=\"#prerequisites\" title=\"Permalink to this headline\"></a>\r\n[Basic Python](https://www.learnpython.org/en/Hello%2C_World%21), [HTML](https://www.w3schools.com/html/), [CSS](https://www.w3schools.com/css/) and [Unix Command Line](https://www.learnenough.com/command-line-tutorial/basics).\r\nAs long as you're comfortable with all that, you're good.\r\n\r\n# Table of Contents<a class=\"headerlink\" id=\"toc\" href=\"#toc\" title=\"Permalink to this headline\"></a>\r\n1. [Introduction](#introduction)\r\n    1. [Our Goal](#our-goal)\r\n    2. [So what is Django?](#so-what-is-django)\r\n2. [Setting up our project](#setting-up-our-project)\r\n    1. [The Database](#the-database)\r\n    2. [Media file support](#media-file-support)\r\n3. [Writing our models](#writing-our-models)\r\n    1. [Migrating our new models](#migrating-our-new-models)\r\n    2. [Admin control panel](#admin-control-panel)\r\n4. [View logic](#view-logic)\r\n5. [Templates with Style](#templates-with-style)\r\n6. [Wrap Up](#wrap-up)\r\n<br>\r\n\r\n---\r\n\r\n# Introduction<a class=\"headerlink\" id=\"introduction\" href=\"#introduction\" title=\"Permalink to this headline\"></a>\r\n**This is not a tutorial.** This crash course is a quick way to get started making a basic Django website **without** going in-depth about the underlying concepts that are required to make complex web applications. For every step of this crash course I will link a more thorough explanation of the tools and concept you're using so you can get a better understanding of Django while creating your first project.\r\n\r\n## Our Goal<a class=\"headerlink\" id=\"our-goal\" href=\"#our-goal\" title=\"Permalink to this headline\"></a>\r\nWe're making a website where you can **upload an image with a title, date and description**. Simple.\r\n\r\n## So what is Django?<a class=\"headerlink\" id=\"so-what-is-django\" href=\"#so-what-is-django\" title=\"Permalink to this headline\"></a>\r\n**Django** */JANG-oh/* \u2014 A type of tool ([web framework](https://en.wikipedia.org/wiki/Web_framework)) most known for helping people make neat websites quickly with few mistakes.\r\n\r\nMaking stuff in Django follows this pattern:\r\n1. **Model** \u2014 *How you store stuff.* This is where we will tell Django how to store our images, titles, dates and descriptions.\r\n2. **View** \u2014 *Where your project thinks.* This is how our website will get the stuff we stored based on our **models** and process it for the user.\r\n3. **Template** \u2014 *How your project presents the stuff it was thinking about.* The **view** will use this to display the contents it processed based on our **models**.\r\n\r\nDjango does more complex (and really fun) things, but if you're starting out that's all you need to know *for now*.\r\n\r\n[**[in-depth]**](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Introduction#What_is_Django)\r\n\r\n---\r\n# Setting up our project<a class=\"headerlink\" id=\"setting-up-our-project\" href=\"#setting-up-our-project\" title=\"Permalink to this headline\"></a>\r\n> **NOTICE: Windows Users**<br>\r\n> By default Windows doesn't have a Unix command line, which is a prerequisite for this crash course. The October 2018 update for Windows 10 offers Linux subsystems, such as Ubuntu. Please install and set up a Linux subsystem to utilize the Unix command line.\r\n\r\nWe're going to use your computer's terminal to set up our python environment and Django. Let's make the project in our computer's `Documents` folder, so enter these commands\r\n```console\r\n$ cd ~/Documents\r\n$ python3 -m venv django_cc\r\n```\r\n\r\n- `python3 -m venv django_cc` will create a virtual environment within a folder called `django_cc` for our project so all the stuff we install for it to work won't interfere with anything else on your system. [**[in-depth]**](https://virtualenv.pypa.io/en/stable/)\r\n\r\nNext we'll get in our project folder, enable our new python environment and install Django.\r\n```bash\r\n$ cd django_cc\r\n$ source bin/activate\r\n$ pip install django\r\n```\r\n\r\n- `source bin/activate` will activate the virtual environment we created. This means when we install Django, it won't be installed on the whole system, just in our project.\r\n- `pip install django` will use Python's package manager to install the most recent version of Django.\r\n\r\nNow that Django is installed we get some new commands. Let's start by creating a project within Django, migrating our development database and finally starting our local development server for the first time to ensure we did everything right.\r\n```bash\r\n$ django-admin startproject django_cc\r\n$ cd django_cc\r\n$ python3 manage.py migrate\r\n$ python3 manage.py runserver\r\n```\r\n\r\n- `django-admin start project django_cc` is telling django to make the stem of our project where everything else will be connected (i.e. django apps). [**[in-depth]**](https://docs.djangoproject.com/en/2.2/ref/django-admin/)\r\n    - This is also where we will find `manage.py` the file that we will use to interact with Django.\r\n- `python3 manage.py migrate` is used to let Django know that changes have been made to our models. Since we've just started our project this will be our initial migration which establishes models Django makes on its own (i.e. accounts, activity logs, permissions, etc.). [**[in-depth]**](https://docs.djangoproject.com/en/2.2/topics/migrations/)\r\n- `python3 manage.py runserver` will start our development server where we will be testing our project.\r\n\r\nTo see the development server in action go to [127.0.0.1:8000](http://127.0.0.1:8000/) in your browser. A Django start up page should appear:\r\n\r\n<img class=\"materialboxed window lazyload\" data-caption=\"Django Development Server Default Page\" data-src=\"https://cdn.ceiphr.com/articles/a-crash-course-in-django/django-cc-default.png\" alt=\"Django Development Server Default Page\"/>\r\n\r\n## The Database<a class=\"headerlink\" id=\"the-database\" href=\"#the-database\" title=\"Permalink to this headline\"></a>\r\nNext grab your favorite text editor or python IDE because we're going to delve into Django. We're going to start by creating a Django app where we will write all of our models for this project.\r\n```bash\r\n$ python manage.py startapp blog\r\n```\r\n\r\nIn order for our core project to recognize this app we need to let it know our `blog` app exists by adding it to `INSTALLED_APPS` in `django_cc/settings.py` like so:\r\n```python\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'blog',\r\n]\r\n```\r\n\r\n## Media file support<a class=\"headerlink\" id=\"media-file-support\" href=\"#media-file-support\" title=\"Permalink to this headline\"></a>\r\nLet's add the following to the bottom of `settings.py` so Django knows where to store media files such as the images that we upload:\r\n```python\r\n# Media file support\r\n\r\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\r\nMEDIA_URL = '/media/'\r\n```\r\n\r\nWe will also need to add a few imports and a conditional at the bottom of `django_cc/urls.py` so the files are accessible on the development server:\r\n```python\r\nfrom django.conf.urls import url\r\nfrom django.contrib import admin\r\n\r\n# Add these imports for static file support and to get\r\n# directory details from Django's settings.py\r\nfrom django.conf.urls.static import static\r\nfrom django.conf import settings\r\n\r\nurlpatterns = [\r\n    url(r'^admin/', admin.site.urls),\r\n]\r\n\r\n# Add this to enable media file support on the development server\r\nif settings.DEBUG:\r\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\r\n```\r\n\r\n[**[in-depth]**](https://docs.djangoproject.com/en/2.2/howto/static-files/)\r\n\r\nGreat, our project is now set up, and we can begin by writing our models.\r\n\r\n---\r\n# Writing our models<a class=\"headerlink\" id=\"writing-our-models\" href=\"#writing-our-models\" title=\"Permalink to this headline\"></a>\r\nInside of our new `blog` app we will find a `models.py` file where we will write our models for our database. The class `Post` will act as our first model for uploading a post with an image, title, description, and date published.\r\n```python\r\nfrom django.db import models\r\nimport datetime\r\n\r\nclass Post(models.Model):\r\n    image = models.FileField(upload_to='images/')\r\n    title = models.CharField(default=\"\", max_length=64)\r\n    description = models.CharField(default=\"\", max_length=512)\r\n    date = models.DateField(default=datetime.date.today)\r\n```\r\n\r\n- `models.FileField(upload_to='images/')` acts as a field where we will upload images to an image folder in the media directory we configured in settings.\r\n- `models.CharField(default=\"\", max_length=n)` is a basic text field where the max character length is **n**.\r\n- `models.DateField(default=datetime.date.today)` is self explanitory, it's a date/time field that is set to the current date and time.\r\n\r\n[**[in-depth]**](https://docs.djangoproject.com/en/2.2/topics/db/examples/many_to_many/)\r\n\r\nTo finish off our models let's tell Django to order them based newest to oldest:\r\n```python\r\nclass Post(models.Model):\r\n    image = models.FileField(upload_to='images/')\r\n    title = models.CharField(default=\"\", max_length=64)\r\n    description = models.CharField(default=\"\", max_length=512)\r\n    date = models.DateField(default=datetime.date.today)\r\n    class Meta:\r\n        ordering = ['-date']\r\n    def __str__(self):\r\n        return self.title\r\n```\r\n\r\n- The `Meta` class can do a lot, in our case we will use it to order our models based on time.\r\n- The `__str__` function is telling Django to display the title (instead of saying Post 1, Post 2, etc.) for when we interact with our entries later on in the Django admin panel.\r\n\r\n[**[in-depth]**](https://docs.djangoproject.com/en/2.2/ref/models/options/#ordering)\r\n\r\n## Migrating our new models<a class=\"headerlink\" id=\"migrating-our-new-models\" href=\"#migrating-our-new-models\" title=\"Permalink to this headline\"></a>\r\nFinish off our models with the following two commands that essentially tell Django that we've made some changes and that they should be applied to our database:\r\n```console\r\n$ python3 manage.py makemigrations\r\n$ python3 manage.py migrate\r\n```\r\n\r\nCongratulations! Our database is all set up for our posts. There is one issue though. We can't edit them right now. Let's get you set up with the Django admin panel so you make some posts.\r\n\r\n## Admin control panel<a class=\"headerlink\" id=\"admin-control-panel\" href=\"#admin-control-panel\" title=\"Permalink to this headline\"></a>\r\nInside of our `blog` app go to `admin.py` and add the following:\r\n```python\r\nfrom django.contrib import admin\r\nfrom blog.models import *\r\n\r\nadmin.site.register(Post)\r\n```\r\n\r\n- `from database.models import Post` imports all the models that we've just created.\r\n- `admin.site.register(<model_name>)` tells Django to display that model within the control panel.\r\n\r\nNext we will create a superuser, so we can log into the admin panel. Type the following command and follow the prompts. You only need to fill out the username and passwords prompts.\r\n```console\r\n$ python3 manage.py createsuperuser\r\nUsername (leave blank to use 'ari'):\r\nEmail address:\r\nPassword:\r\nPassword (again):\r\nSuperuser created successfully.\r\n```\r\n\r\nOnce completed head over to [127.0.0.1:8000/admin](http://127.0.0.1:8000/admin) and sign in with the credentials you just wrote. You should see this page:\r\n\r\n<img class=\"materialboxed window lazyload\" data-caption=\"Django Development Server Admin Panel\" data-src=\"https://cdn.ceiphr.com/articles/a-crash-course-in-django/django-cc-admin.png\" alt=\"Django Development Server Admin Panel\"/>\r\n\r\nFrom here you can add posts to your Django project. We are officially done with our models. Next will design our view so Django can serve our posts.\r\n\r\n---\r\n\r\n# View logic<a class=\"headerlink\" id=\"view-logic\" href=\"#view-logic\" title=\"Permalink to this headline\"></a>\r\nA view is how Django knows what to do when we ask for a page. The first thing we have to do is create a `views.py` file in `django_cc`. In that file paste the following:\r\n```python\r\nfrom django.shortcuts import render\r\nfrom django.views.generic.base import View\r\nfrom django.views.generic import TemplateView\r\nfrom database.models import Post\r\n\r\nclass PostFeed(TemplateView):\r\n    template_name = 'index.html'\r\n\r\n    def get_context_data(self, *args, **kwargs):\r\n        context = dict()\r\n        context[\"posts\"] = Post.objects.all()\r\n```\r\n\r\n- `from django.views.generic import TemplateView` allows us to use Django's basic template view which is all that we need for displaying our posts.\r\n- `from database.models import Post` imports all of our database models for our view functions to use.\r\n- `PostFeed` is our basic template view that will use an `index.html` file we will create next to render our database contents.\r\n- `get_context_data` is how we will send our template the information from the database.\r\n    - `context[\"posts\"] = Post.objects.all()` Our template will refer to `posts` within our `context` dictionary for a list of all posts that is collected from the database using `Post.objects.all()`\r\n\r\n[**[in-depth]**](https://docs.djangoproject.com/en/2.2/ref/class-based-views/base/)\r\n\r\nIn `urls.py` we will need to add a new path so Django knows when that URL is requested to call our view:\r\n```python\r\nfrom django.conf.urls import url\r\nfrom django.contrib import admin\r\nfrom django.conf.urls.static import static\r\nfrom django.conf import settings\r\n\r\n# import path for easy urls\r\nfrom django.urls import path\r\n\r\n# import our views so urls.py can call them\r\nfrom django_cc.views import PostFeed\r\n\r\nurlpatterns = [\r\n\r\n    # Path for root of our website that will display the post feed\r\n    path('', PostFeed.as_view(template_name=\"index.html\"), name=\"PostFeed\"),\r\n    url(r'^admin/', admin.site.urls),\r\n]\r\n\r\nif settings.DEBUG:\r\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\r\n```\r\n\r\nOur basic view logic is now complete, now we need to build our index template for displaying our posts.\r\n\r\n---\r\n\r\n# Templates with Style<a class=\"headerlink\" id=\"templates-with-style\" href=\"#templates-with-style\" title=\"Permalink to this headline\"></a>\r\nIn the root of our Django project where you can find our `database` and `django_cc` folders create a `templates` folder and make an `index.html` file inside. For the design of our site we're going to use the framework [Bulma](https://bulma.io/documentation/) so we won't need to write any CSS. Here is a boilerplate we can use for our template.\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <title>Posts | Django Crash Course</title>\r\n        <link rel=\"stylesheet\"\r\n\t\thref=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.4/css/bulma.min.css\"\r\n\t\tintegrity=\"sha256-8B1OaG0zT7uYA572S2xOxWACq9NXYPQ+U5kHPV1bJN4=\"\r\n\t\tcrossorigin=\"anonymous\" />\r\n    </head>\r\n    <body>\r\n    </body>\r\n</html>\r\n```\r\n\r\nDjango templates utilize a DRY version of HTML called Django HTML. This is how we will send our context to render in our `index.html` template. In the body of the boilerplate let's add a basic card with the context for our posts.\r\n```html\r\n<div class=\"container\">\r\n    {% for post in posts %}\r\n    <div class=\"card\">\r\n        <div class=\"card-image\">\r\n            <figure class=\"image\">\r\n                <img src=\"{{ post.image.url }}\" alt=\"Placeholder image\" \r\n\t\t\t\tstyle=\"max-width: 250px; max-height: 250px;\">\r\n            </figure>\r\n        </div>\r\n        <div class=\"card-content\">\r\n            <div class=\"content\">\r\n                <b>{{ post.title }}</b> | {{ post.description }}\r\n                <br>\r\n                <time datetime=\"{{ post.date }}\">{{ post.date }}</time>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    {% endfor %}\r\n</div>\r\n```\r\n\r\n- `{% for post in posts %}` acts as a for loop that will duplicate its contents for each post inside `posts`.\r\n- Every time the for loop runs the context for the post in the current iteration is placed in the HTML when it is referred to using `{{ <variable> }}`\r\n    - `{{ post.image.url }}` is how you refer to the image's URL, you cannot just reference the image itself.\r\n\r\nWhen we visit [127.0.0.1:8000](http://127.0.0.1:8000) there should be a list of all the posts we've added in the control panel:\r\n\r\n<img class=\"materialboxed window lazyload\" data-caption=\"Django Crash Course Post Feed\" data-src=\"https://cdn.ceiphr.com/articles/a-crash-course-in-django/django-cc-feed-posts.png\" alt=\"Django Crash Course Post Feed\"/>\r\n\r\nNow we have a website that displays what we add to our control panel in Bulma cards. Neat.\r\n\r\n[**[in-depth]**](https://docs.djangoproject.com/en/2.2/topics/templates/)\r\n\r\n---\r\n# Wrap Up<a class=\"headerlink\" id=\"wrap-up\" href=\"#wrap-up\" title=\"Permalink to this headline\"></a>\r\nDjango is a wonderful framework for building websites and other complex things. Today you've created a very basic website that is capable of displaying posts akin to Instagram and in the future hopefully you can build Instagram yourself. For now I suggest learning more about Django either through [their documentation](https://docs.djangoproject.com/en/2.2/) or [this introduction (which got me started)](https://rnvarma.gitbooks.io/intro-to-django-real/content/).\r\n\r\n**FYI** \u2014 Follow [this tutorial by Digital Ocean](https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-18-04) so you can learn how to host your Django creations for the world to see. If you want to host with Digital Ocean, [use my referral link for a discount](https://m.do.co/c/b95c2a8a5568).\r\n\r\nArticle cover photo by <a style=\"background-color:black;color:white;text-decoration:none;padding:4px 6px; margin-left: 6px; font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px\" href=\"https://unsplash.com/@grohsfabian?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"Download free do whatever you want high-resolution photos from Fabian Grohs\"><span style=\"display:inline-block;padding:2px 3px\"><svg xmlns=\"http://www.w3.org/2000/svg\" style=\"height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white\" viewBox=\"0 0 32 32\"><title>unsplash-logo</title><path d=\"M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z\"></path></svg></span><span style=\"display:inline-block;padding:2px 3px\">Fabian Grohs</span></a>\r\n\r\n*Edit: Renamed classes to adhere to PEP 8 and renamed database app to blog.*",
            "image": "articles/2019/05/25/randall-ruiz-272502-unsplash.jpg",
            "modified": "2019-05-25",
            "published": "2019-05-25",
            "tags": [
                1,
                2
            ]
        }
    },
    {
        "model": "blog.article",
        "pk": 2,
        "fields": {
            "title": "Ceiphr.com v2",
            "summary": "This site has been completely revamped for improved performance with more dynamic content. All notable changes for the latest release are documented in this post.",
            "public": true,
            "latex_support": false,
            "slug": "ceiphrcom-v2",
            "body": "# Why the update?<a class=\"headerlink\" id=\"why-the-update\" href=\"#why-the-update\" title=\"Permalink to this headline\">\u00b6</a>\r\nThis website is built with Django, a very powerful framework that is known to be the basis for sites like Instagram and Pinterest. My site merely\r\nshowed a couple images and a contact form that sent unauthenticated emails to my inbox. That didn't feel like a good use for Django, especially if I'm hosting this site for a monthly fee. So below are all the new features and tweaks I've made to this site to better leverage the power of Django.\r\n\r\n## The Blog<a class=\"headerlink\" id=\"the-blog\" href=\"#the-blog\" title=\"Permalink to this headline\">\u00b6</a>\r\nThis blog has full markdown support with syntax highlighting thanks to mistune, pygments, and [this wonderful tutorial](https://www.ignoredbydinosaurs.com/posts/275-easy-markdown-and-syntax-highlighting-django). Below you will see examples of the markdown and syntaxt highlighting with a monokai theme (because it's the **best**). And if you scroll to the bottom of this page there might be recommendations for the latest articles I've posted.\r\n\r\n## Improved Performance<a class=\"headerlink\" id=\"improved-performance\" href=\"#improved-performance\" title=\"Permalink to this headline\">\u00b6</a>\r\nI've also been using Google's [web.dev](https://web.dev/) to better adhere to web standards and generally improve this site's performance.\r\n\r\nAll images are now properly sized to avoid using extra bandwidth. JazzBand's [Sorl-Thumbnail](https://github.com/jazzband/sorl-thumbnail) Django app allowed me to convert image formats and resize them to better function on mobile devices. But there was one problem, *Apple* (of course). \r\n\r\nSafari doesn't support modern image formats, like Google's WebP, so every image in each Django template had to be rewritten in order for Apple devices to use, the more widely supported, JPEG:\r\n```html\r\n<picture>\r\n\t<!-- WebP image -->\r\n\t{% thumbnail image_name \"120x120\" format=\"WEBP\" as webp %}\r\n\t<source data-srcset=\"{{ webp.url }}\" type=\"image/webp\">\r\n\t{% endthumbnail %}\r\n\t<!-- JPEG fallback image -->\r\n\t{% thumbnail image_name \"120x120\" format=\"JPEG\" as jpeg %}\r\n\t<source data-srcset=\"{{ jpeg.url }}\" type=\"image/jpeg\">\r\n\t{% endthumbnail %}\r\n\t<img>\r\n</picture>\r\n```\r\nBesides that hiccup in development, this site is by far the fasted one I've built to date with Lighthouse giving this site's front page a [97/100 for performance](https://cdn.ceiphr.com/articles/ceiphr.com-v2/ceiphrcom-lighthouse-report.html).\r\n\r\n## Better SEO<a class=\"headerlink\" id=\"better-seo\" href=\"#better-seo\" title=\"Permalink to this headline\">\u00b6</a>\r\nSearch Engine Optimization allows my site to appear higher in Google search based on the way information is organized and given to web crawlers.\r\n\r\nInorder for web crawlers to establish what pages to look at they visit the [sitemap.xml](/sitemap.xml) for each given site (if it's available). A sitemap shows all the indexed pages on a given website. The sitemap I was initially using on this project was static because pages didn't change, only the contents did (e.g. adding new projects/skills/events). Once the blog was added that system needed to be revamped. \r\n\r\nDjango comes with a [sitemap framework](https://docs.djangoproject.com/en/2.1/ref/contrib/sitemaps/) by default where I make a basic `sitemaps.py` file and have it talk to `urls.py` to generate a sitemap based on article entries and static pages. Django does a really great job of making this simple and easy to implement since below is **all** of the code I had to write for the sitemap generator:\r\n```python\r\nfrom django.urls import reverse\r\nfrom django.contrib.sitemaps import Sitemap\r\nfrom database.models import Article\r\n\r\n# Static pages\r\nclass StaticViewSitemap(Sitemap):\r\n    changefreq = 'daily'\r\n    priority = 1.0\r\n\r\n    def items(self):\r\n        return ['FrontPage', 'Projects', 'Blog', 'Events', 'Skills', 'Contact']\r\n\r\n    def location(self, item):\r\n        return reverse(item)\r\n\r\n# Blog articles\r\nclass BlogSitemap(Sitemap):\r\n    changefreq = 'never'\r\n    priority = 0.5\r\n\r\n    def items(self):\r\n        return Article.objects.all()\r\n\r\n    def lastmod(self, obj):\r\n        return obj.modified\r\n```\r\n\r\nMetadata has also been reworked. In order to help crawlers and social media sites properly display blog posts the base template needed to be updated to support article metadata. This means that when an article is posted on social media, instead of a plain link, the user gets a rich content widget that displays an article's title, summary and header image. Anything I publish should have a higher average search ranking on Google thanks to thorough metadata for each post and static page.\r\n\r\n## Security Hardening<a class=\"headerlink\" id=\"security-hardening\" href=\"#security-hardening\" title=\"Permalink to this headline\">\u00b6</a>\r\nA website is nothing if it's not secure. I don't want my site vandalized nor do I want people getting access to private information such as API keys. So I've tried to maintain a high level of security when it comes to this site and comply with standards pertaining to server and website security.\r\n\r\n### The Server<a class=\"headerlink\" id=\"the-server\" href=\"#the-server\" title=\"Permalink to this headline\">\u00b6</a>\r\nWe're using [Certbot](https://certbot.eff.org/) with [Let's Encrypt](https://letsencrypt.org/) for SSL, so your connection to this site is encrypted. My production NGINX is configured with SSL stapling, session caching (50 minutes) and HSTS (1 year) enabled. All secret and API keys are kept on the production server and are git-ignored so I don't accidently publish them to this project's [Gitlab repository](https://gitlab.com/ceiphr/ceiphr.com). The server also requires a SSH key to login and has brute force protection which blocks multiple connection attempts.\r\n\r\nQualys SSL Labs [gives this site an A+](https://www.ssllabs.com/ssltest/analyze.html?d=ceiphr.com) which means we're safe *for now*.\r\n\r\n### The Django Project<a class=\"headerlink\" id=\"the-django-project\" href=\"#the-django-project\" title=\"Permalink to this headline\">\u00b6</a>\r\nYou won't find the admin panel for this site because the URL is a 128 character hash. But if you defy the odds and somehow manage to do that, I'm using [TOTP (Django-OTP)](https://bitbucket.org/psagers/django-otp) and a 128 character password, *so go away*. And of course my passwords are salted and hashed thanks to Django's account management system.\r\n\r\nInstead of running Postfix for my email system I've integrated this site with [SendGrid](https://sendgrid.com/) specifically because they authenticate domains and their web API can be used seamlessly with Django. Now if you use this site's contact form it will send you and I a copy of the message via `noreply@mail.ceiphr.com`. Emails are therefore handled securely by SendGrid who also authenticates my mail domain. The headers for both emails also contain a `reply_to` attribute that allows me to reply directly to your email address and for you to directly reply to me so we don't bother our good bot, *noreply*.\r\n\r\n## Complying with Standards<a class=\"headerlink\" id=\"complying-with-standards\" href=\"#complying-with-standards\" title=\"Permalink to this headline\">\u00b6</a>\r\nI'm slowly moving my naming scheme for python variables over to [PEP8](https://www.python.org/dev/peps/pep-0008/) and my classes/IDs over to [BEM](http://getbem.com/), but renaming anything is annoying and generally leads to a lot of bugs so I will take my sweet time.\r\n\r\nStarting with this release I will be basing my changelogs off of [*Keep a Changelog*](https://keepachangelog.com/en/1.0.0/) and adhering to [semantic versioning](https://semver.org/spec/v2.0.0.html) for denoting changes to all of my side projects over at [changelog.ceiphr.com](https://changelog.ceiphr.com/). Below is a changelog of all the significant changes made to this site over the past two weeks using those standards.\r\n\r\n# Wrap up<a class=\"headerlink\" id=\"wrap-up\" href=\"#wrap-up\" title=\"Permalink to this headline\">\u00b6</a>\r\nThis update makes this site faster and more robust than previous versions while also displaying more dynamic content. Check out [the full changelog](https://changelog.ceiphr.com/4706/ceiphr-com-version-0-2-0-release-notes). In the coming weeks I will be drafting posts for this site that I hope will act as useful tutorials and resources for web development, server management, online privacy and security.\r\n\r\nThank you for reading my first post.",
            "image": "articles/2019/05/26/Desktop_5K_-_Orbital_Zen.png",
            "modified": "2019-05-26",
            "published": "2019-05-26",
            "tags": [
                1
            ]
        }
    },
    {
        "model": "blog.article",
        "pk": 3,
        "fields": {
            "title": "Latex Test",
            "summary": "latex-test",
            "public": true,
            "latex_support": false,
            "slug": "latex-test",
            "body": "# Latex Testing Page\r\n---\r\n\r\n## Test #1\r\nWhen \\\\(a \\ne 0\\\\), there are two solutions to \\\\(ax^2 + bx + c = 0\\\\) and they are\r\n$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$$\r\n\r\n## Test #2\r\n$$\r\n \\frac{1}{\\displaystyle 1+\r\n   \\frac{1}{\\displaystyle 2+\r\n   \\frac{1}{\\displaystyle 3+x}}} +\r\n \\frac{1}{1+\\frac{1}{2+\\frac{1}{3+x}}}\r\n$$\r\n\r\n## Test #3\r\n$$\\int_0^\\infty e^{-x^2} dx=\\frac{\\sqrt{\\pi}}{2}$$\r\n\r\n## Test #4\r\n$$\\int \\!\\! \\int f(x,y)\\,\\mathrm{d}x\\mathrm{d}y$$\r\n\r\n## Test #5\r\n$$\r\n\\underbrace{a+\\overbrace{b+\\cdots}^{{}=t}+z}\r\n_{\\mathrm{total}} ~~\r\na+{\\overbrace{b+\\cdots}}^{126}+z\r\n$$",
            "image": "articles/2019/05/26/silvana-carlos-1620879-unsplash.jpg",
            "modified": "2019-05-26",
            "published": "2019-05-26",
            "tags": [
                2
            ]
        }
    },
    {
        "model": "blog.article",
        "pk": 4,
        "fields": {
            "title": "Latex Test 2",
            "summary": "latex-test-2",
            "public": true,
            "latex_support": false,
            "slug": "latex-test",
            "body": "# Latex Testing Page\r\n---\r\n\r\n## Test #1\r\nWhen \\\\(a \\ne 0\\\\), there are two solutions to \\\\(ax^2 + bx + c = 0\\\\) and they are\r\n$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$$\r\n\r\n## Test #2\r\n$$\r\n \\frac{1}{\\displaystyle 1+\r\n   \\frac{1}{\\displaystyle 2+\r\n   \\frac{1}{\\displaystyle 3+x}}} +\r\n \\frac{1}{1+\\frac{1}{2+\\frac{1}{3+x}}}\r\n$$\r\n\r\n## Test #3\r\n$$\\int_0^\\infty e^{-x^2} dx=\\frac{\\sqrt{\\pi}}{2}$$\r\n\r\n## Test #4\r\n$$\\int \\!\\! \\int f(x,y)\\,\\mathrm{d}x\\mathrm{d}y$$\r\n\r\n## Test #5\r\n$$\r\n\\underbrace{a+\\overbrace{b+\\cdots}^{{}=t}+z}\r\n_{\\mathrm{total}} ~~\r\na+{\\overbrace{b+\\cdots}}^{126}+z\r\n$$",
            "image": "articles/2019/05/26/silvana-carlos-1620879-unsplash.jpg",
            "modified": "2019-05-26",
            "published": "2019-05-26",
            "tags": [
                2
            ]
        }
    }
]